1 PROGRAMA : VAR_GLOBAL CLASE_PRIN BI
2 VAR_GLOBAL : DEC_VAR ; VAR_GLOBAL
3 VAR_GLOBAL :  
4 DEC_VAR : DEFINE_VAR GTAG_INIT = EXPRESION
5 DEFINE_VAR : define TIPO id
6 TIPO : int
7 TIPO : real
8 TIPO : prec
9 TIPO : flag
10 TIPO : char
11 TIPO : byte
12 TIPO : chain
13 TIPO : vector [ TIPO ]
14 GTAG_INIT : < TAG_VAR >
15 GTAG_INIT : 
16 TAG_VAR : last
17 TAG_VAR :  
18 EXPRESION : J I
19 I : || J I
20 I :  
21 J : L K
22 K : & L K
23 K :  
24 L : N M
25 M : == N M
26 M : != N M
27 M :  
28 N : Q O
29 O : < Q O
30 O : > Q O
31 O : >= Q O
32 O : <= Q O
33 O :  
34 Q : S R
35 R : + S R
36 R : - S R
37 R :  
38 S : U T
39 T : ^ U T
40 T :  
41 U : X V
42 V : * X V
43 V : / X V
44 V : % X V
45 V : // X V
46 V :  
47 X : - Y
48 X : + Y
49 X : ! Y
50 X : Y
51 Y : ( EXPRESION )
52 Y : VALOR
53 VALOR : 1
54 VALOR : 1.0
55 VALOR : "a"
56 VALOR : 'a'
57 VALOR : true
58 VALOR : id
59 CLASE_PRIN : class id < TAG_PRIN > { CLASS_BODY }
60 TAG_PRIN : public , main
61 TAG_PRIN : main , public
62 CLASS_BODY : C_DEFINE CLASS_INSTR
63 CLASS_INSTR : C_DEFINE CLASS_INSTR
64 CLASS_INSTR : 
65 C_DEFINE : DEFINE_ATR
66 C_DEFINE : DEFINE_SUMMON 
67 C_DEFINE : DEFINE_MET 
68 DEFINE_ATR : DEFINE_TYPE ATR_ASSIGN ;
69 ATR_ASSIGN : = EXPRESION
70 ATR_ASSIGN :
71 DEFINE_MET  : DECL_MET ( ADD_ARG ) { INSTRUCCIONES }
72 DECL_MET : define empty id TAGM_INIT
73 DECL_MET : DEFINE_TYPE
74 TAGM_INIT : < PUB_PRI STATIC >
75 TAGM_INIT :
76 STATIC : , static
77 STATIC :  
78 DEFINE_TYPE : DEFINE_VAR TAG_INIT
79 TAG_INIT : < TAG_ATR >
80 TAG_INIT :
81 TAG_ATR : PUB_PRI TAG_ATR2
82 TAG_ATR : 
83 PUB_PRI : public
84 PUB_PRI : private
85 TAG_ATR2 : , static , last
86 TAG_ATR2 : , static
87 TAG_ATR2 : , last
88 TAG_ATR2 : , last , static
89 TAG_ATR2 : 
90 DEFINE_SUMMON : define summon id ( ADD_ARG ) { INSTRUCCIONES }
91 ADD_ARG : ARGUMENTO
92 ADD_ARG :  
93 MORE_ARG : , ARGUMENTO
94 MORE_ARG :  
95 ARGUMENTO : TIPO id MORE_ARG
96 INSTRUCCIONES : INSTRUCCION ; INSTRUCCIONES
97 INSTRUCCIONES :  
98 INSTRUCCION : DEC_VAR
99 INSTRUCCION : AO
100 INSTRUCCION : AS
101 INSTRUCCION : AV
102 INSTRUCCION : AX
103 INSTRUCCION : AZ
104 INSTRUCCION : BA
105 INSTRUCCION : BB
106 INSTRUCCION : BC
107 INSTRUCCION : id BD
108 INSTRUCCION : throw RET_VALUE
109 RET_VALUE : EXPRESION
110 RET_VALUE : 
111 AO : id AP ( AQ )
112 AP : . id
113 AP :  
114 AQ : id AR
115 AQ :  
116 AR : , id AR
117 AR :  
118 AS : inspect id { select : AU AT }
119 AT : select : AU AT
120 AT :  
121 AU : 1 { INSTRUCCIONES } jump ;
122 AU : none { INSTRUCCIONES } jump ;
123 AV : when ( EXPRESION ) { INSTRUCCIONES } AW
124 AW : then ( EXPRESION ) { INSTRUCCIONES } AW
125 AW : but { INSTRUCCIONES }
126 AW :  
127 AX : repeat AY
128 AY : ( EXPRESION ) { AM }
129 AY : { AM } if ( EXPRESION )
130 AZ : loop ( int id = EXPRESION ; EXPRESION ; id BD ) { INSTRUCCIONES }
131 BA : define id id = summon id ( AQ )
132 BB : say ( EXPRESION )
133 BC : id = read ( EXPRESION )
134 BD : BE
135 BD : = EXPRESION
136 BE : ++
137 BE : --
138 BI : define class id { CLASS_BODY } BI
139 BI :  
